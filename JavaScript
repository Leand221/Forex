document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURAÇÕES ---
    const API_KEY = 'SUA_CHAVE_DE_API_AQUI'; // <-- COLOQUE SUA CHAVE DE API AQUI
    const PAIR = 'EURUSD';
    const RSI_PERIOD = 14;
    const SMA_SHORT_PERIOD = 50;
    const SMA_LONG_PERIOD = 200;
    const RSI_OVERBOUGHT = 70;
    const RSI_OVERSOLD = 30;
    const UPDATE_INTERVAL = 60000; // 60 segundos

    // --- ELEMENTOS DO DOM ---
    const priceEl = document.getElementById('price');
    const timestampEl = document.getElementById('timestamp');
    const signalEl = document.getElementById('signal');
    const signalCardEl = document.getElementById('signal-card');
    const rsiValueEl = document.getElementById('rsi-value');
    const rsiProgressEl = document.getElementById('rsi-progress');
    const sma50ValueEl = document.getElementById('sma50-value');
    const sma200ValueEl = document.getElementById('sma200-value');
    const refreshBtn = document.getElementById('refresh-btn');

    // --- FUNÇÕES DE CÁLCULO ---
    const calculateSMA = (data, period) => {
        const relevantData = data.slice(0, period);
        const sum = relevantData.reduce((acc, val) => acc + val.close, 0);
        return sum / period;
    };

    const calculateRSI = (data, period) => {
        let gains = 0;
        let losses = 0;
        for (let i = 1; i < period + 1 && i < data.length; i++) {
            const difference = data[i - 1].close - data[i].close;
            if (difference >= 0) {
                gains += difference;
            } else {
                losses -= difference;
            }
        }
        if (losses === 0) return 100;
        const rs = (gains / period) / (losses / period);
        return 100 - (100 / (1 + rs));
    };

    // --- LÓGICA PRINCIPAL ---
    async function fetchAndAnalyze() {
        resetUI();
        try {
            // Usamos o histórico diário para ter dados suficientes para as médias longas
            const response = await fetch(`https://financialmodelingprep.com/api/v3/historical-chart/1hour/${PAIR}?apikey=${API_KEY}`);
            if (!response.ok) throw new Error(`Erro na API: ${response.statusText}`);
            
            const historicalData = await response.json();
            if (!historicalData || historicalData.length < SMA_LONG_PERIOD) {
                throw new Error('Dados históricos insuficientes para análise.');
            }

            const latestPrice = historicalData[0].close.toFixed(5);
            const sma50 = calculateSMA(historicalData, SMA_SHORT_PERIOD);
            const sma200 = calculateSMA(historicalData, SMA_LONG_PERIOD);
            const rsi = calculateRSI(historicalData, RSI_PERIOD);

            updateUI(latestPrice, rsi, sma50, sma200);
            generateSignal(rsi, sma50, sma200);

        } catch (error) {
            console.error("Falha ao buscar dados:", error);
            priceEl.innerText = "Erro!";
            signalEl.innerText = "Falha na conexão";
            timestampEl.innerText = "Verifique o console para mais detalhes";
            priceEl.classList.remove('loading');
            signalEl.classList.remove('loading');
        }
    }
    
    function resetUI() {
        ['price', 'signal', 'rsi-value', 'sma50-value', 'sma200-value'].forEach(id => {
            const el = document.getElementById(id);
            el.classList.add('loading');
            if (id !== 'price' && id !== 'signal') el.innerText = '--';
        });
        signalEl.innerText = 'Analisando...';
        priceEl.innerText = 'Carregando...';
        signalCardEl.className = 'card signal-card';
    }

    function updateUI(price, rsi, sma50, sma200) {
        priceEl.innerText = price;
        priceEl.classList.remove('loading');
        
        timestampEl.innerText = `Atualizado em: ${new Date().toLocaleTimeString()}`;

        rsiValueEl.innerText = rsi.toFixed(2);
        rsiValueEl.classList.remove('loading');
        rsiProgressEl.style.width = `${rsi}%`;
        
        sma50ValueEl.innerText = sma50.toFixed(5);
        sma50ValueEl.classList.remove('loading');

        sma200ValueEl.innerText = sma200.toFixed(5);
        sma200ValueEl.classList.remove('loading');
    }

    function generateSignal(rsi, sma50, sma200) {
        signalEl.classList.remove('loading');
        let finalSignal = 'MANTER';
        let signalClass = 'hold';

        if (sma50 > sma200 && rsi < RSI_OVERSOLD) {
            finalSignal = 'COMPRAR';
            signalClass = 'buy';
        } else if (sma50 < sma200 && rsi > RSI_OVERBOUGHT) {
            finalSignal = 'VENDER';
            signalClass = 'sell';
        } else if (sma50 > sma200 * 1.001) { // Cruzamento com uma pequena margem
            finalSignal = 'Tendência de Alta';
            signalClass = 'buy';
        } else if (sma50 < sma200 * 0.999) { // Cruzamento com uma pequena margem
            finalSignal = 'Tendência de Baixa';
            signalClass = 'sell';
        }

        signalEl.innerText = finalSignal;
        signalCardEl.classList.add(signalClass);
    }

    // --- EVENTOS E INICIALIZAÇÃO ---
    refreshBtn.addEventListener('click', fetchAndAnalyze);
    setInterval(fetchAndAnalyze, UPDATE_INTERVAL);
    fetchAndAnalyze();
});
